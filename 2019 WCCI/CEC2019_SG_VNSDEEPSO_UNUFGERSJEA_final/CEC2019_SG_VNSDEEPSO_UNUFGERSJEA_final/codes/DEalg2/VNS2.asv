%% TEAM: UN-UF-GERS-JEA
% Cooperation: Universidad Nacional de Colombia, University of Florida, GERS USA and JEA
%% TEAM MEMBERS: 
% Pedro Garcia, pjgarciag@unal.edu.co, PhD Student at UN 
% Diego Rodriguez, diego.rodriguez@gers.com.co, International Studies Manager at GERS USA and PhD Student at UN
% David Alvarez, dlalvareza@unal.edu.co, Postdoc at UN
% Sergio Rivera, srriverar@unal.edu.co, Professor at UN and Fulbright Scholar
% Camilo Cortes, caacortesgu@unal.edu.co, Professor at UN
% Alejandra Guzman, maguzmanp@unal.edu.co, Professor at UN
% Arturo Bretas, arturo@ece.ufl.edu, Professor at UF
% Julio Romero, romeje@jea.com, Chief Innovation and Transformation Officer at JEA
%% ALGORITMH: VNS-DEEPSO
% Combination of Variable Neighborhood Search algorithm (VNS) and Differential Evolutionary Particle Swarm Optimization (DEEPSO)
%% 
% THIS SCRIPT IS BASED ON THE WINNER CODES IN THE TEST BED 2 ON THE
% IEEE 2017 and 2018 Competition & panel: Evaluating the Performance of Modern Heuristic
% Optimizers on Smart Grid Operation Problems  

function [Fit_and_p,FVr_bestmemit, fitMaxVector, Best_otherInfo] = VNS2(deParameters,caseStudyData,otherParameters,xmin,xmax)
I_NP         = deParameters.I_NP;
F_weight     = deParameters.F_weight;
F_CR         = deParameters.F_CR;
I_D          = numel(xmin); %Number of variables or dimension
deParameters.nVariables=I_D;
FVr_minbound = xmin;
FVr_maxbound = xmax;
I_itermax    = deParameters.I_itermax;

%Repair boundary method employed
BRM=deParameters.I_bnd_constr; %1: bring the value to bound violated
                               %2: repair in the allowed range

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
I_strategy   = deParameters.I_strategy; %important variable
fnc= otherParameters.fnc;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----parameters-----------------------------------------------------------
% FLC modification - vectorization
minPositionsMatrix=repmat(FVr_minbound,I_NP,1);
maxPositionsMatrix=repmat(FVr_maxbound,I_NP,1);
deParameters.minPositionsMatrix=minPositionsMatrix;
deParameters.maxPositionsMatrix=maxPositionsMatrix;

% generate initial population.
%FM_pop=genpop(I_NP,I_D,minPositionsMatrix,maxPositionsMatrix);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------Evaluate the best member after initialization----------------------
% Modified by FLC
% switch fnc
%     case 'fitnessFun_DER'
%     caseStudyData=caseStudyData(1);
% end
%%
%% Vectors to store the solutions %% VNS start
%Niter = 50000 - 1;
%Niter = (deParameters.I_iterma+1) -1;
%Niter=round((deParameters.I_iterma+1)*0.61);
Niter=450; % this paremater was tuned
% fitMaxVector = nan(1,Niter+1);
objMaxVector = nan(2,Niter+1);

%% Parameters
% Dimension of the problem
iter = 0;
nper = 24;
[~,D] = size(xmin);
nctrl = D/nper;
penalty = 10000;

Xmin = vec2mat(xmin,nctrl);
Xmax = vec2mat(xmax,nctrl);

%% Types of variables, this was modifed according to the 2018 competition

% Indices
Pdgind = otherParameters.ids.idsGen;      % Active power of a DG
%Qdgind = otherParameters.ids.idsQGen;     % Reactive power of a DG
Xdgind = otherParameters.ids.idsXGen;     % Binary status of a DG

V2Gind = otherParameters.ids.idsV2G;      % EV charging/discharging
DRind  = otherParameters.ids.idsLoadDR;   % Loads for demand response
ESSind = otherParameters.ids.idsStorage;  % ESS charging/discharging
MKind  = otherParameters.ids.idsMarket;   % Market
%Tapind = otherParameters.ids.idsTAP;      % DSS OLTC

% Number of controls
nDG  = length(Pdgind);
nV2G = length(V2Gind);
nDR  = length(DRind);
nESS = length(ESSind);
nMK  = length(MKind);
%nTAP = length(Tapind);

% Variable type
xtype = zeros(1,nctrl);

xtype(Pdgind(1):Pdgind(nDG))  = 1;
%xtype(Qdgind(1):Qdgind(nDG))  = 2;
xtype(Xdgind(1):Xdgind(nDG))  = 2;
xtype(V2Gind(1):V2Gind(nV2G)) = 3;
xtype(DRind(1):DRind(nDR))    = 4;
xtype(ESSind(1):ESSind(nESS)) = 5;
xtype(MKind(1):MKind(nMK))    = 6;
%xtype(Tapind(1):Tapind(nTAP)) = 8;

xtype = repmat(xtype,1,nper);

% Vector of fixed controls
xfix = zeros(1,D);

for i = 1:D
    if xmin(i) == xmax(i)
        xfix(i) = 1;
    end
end
nfix = sum(xfix); % Number of fixed variables

% Costs
% In
Loadc = caseStudyData(1).loadData.CofLoad;
MKc = caseStudyData(1).marketData.sellCofB;
ESSc_ch = caseStudyData(1).storageData.stPriceCharge;
V2Gc_ch = caseStudyData(1).v2gData.v2gCofCharge;

% OC
DGc = caseStudyData(1).genData.genCofB;
DGC = repmat(DGc,1,2);

%?energy price of external supplier S %%%%%%%%%
Loadredc = caseStudyData(1).loadData.CofCut;
Loadredc = caseStudyData(1).loadData.CofReduce;

V2Gc_dis = caseStudyData(1).v2gData.v2gCofDischarge;
ESSc_dis = caseStudyData(1).storageData.stPriceDischarge;
ENSc = caseStudyData(1).loadData.CofENS;

%% Random Initial Solution
x = zeros(1,D);
for i = 1:D
    x(i) = xmin(i) + rand*(xmax(i) - xmin(i));
end

for i = 1:D
    if x(i) < xmin(i)
        x(i) = xmin(i);
    elseif x(i) > xmax(i)
        x(i) = xmax(i);  
    end
end

nEvals=0;

whileIter=0;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if iter < Niter
    
            [solFitness_M, solPenalties_M,Struct_Eval]=feval(fnc,x,caseStudyData, otherParameters,deParameters.Scenarios);
        
            nEvals  = nEvals+(deParameters.I_NP*deParameters.Scenarios);

            for i=1:deParameters.I_NP   % Eval Initial population
                    FIT(i)  = mean(solFitness_M(i,:))+mean(solPenalties_M(i,:));  
                    obj(i)  = FIT(i); 
                    fit(i)  = mean(solFitness_M(i,:))+std(solFitness_M(i,:));
                    pit(i)  = mean(solPenalties_M(i,:));
                    stdr(i)  = std(solFitness_M(i,:));
            end
       
            xrep=x;
        %[FIT,obj,xrep,otherParameters] = fitnessFun_DER(x,caseStudyData,otherParameters);
        %[fit,~,penSlack,penSlines,penVmin,penVmax] = constraint_handling(obj,xrep,Xmax,Xmin,penalty,caseStudyData,otherParameters);
    iter = iter + 1;
    fitMaxVector(:,iter)=[mean(solFitness_M(1,:));mean(solPenalties_M(1,:))];
    %fprintf('%2d, %2d, ITER: %5d, FITNESS: %10.4f, OBJECTIVE: %10.4f, INF: %10.4f, OC: %10.4f, IN: %10.4f; \n',0,0,iter,fit,obj(2)-obj(1),fit+obj(1)-obj(2),obj(2),obj(1));

    FITBEST = FIT;
    OBJBEST = obj;
%     fitMaxVector(iter) = FITBEST;
    objMaxVector(:,iter)= OBJBEST(1,:);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fbest = fit;
pit;
stdr;
objbest = obj;
xbest = xrep;

%% Improve initial solution
display('HEURISTIC RULES')
display('Improve initial solution with bound methodology and utility point of view')
% bounds methodology

kk=2; % in some conditions this value can be tuned

X = vec2mat(xbest,nctrl);

% these heuristic rule are for the study case of the CEC/GECCO 2019 competition, if other
% case study is required please consider reevalute the heuristic rules
for i = 1:nper
    for j = 1:nctrl
        if xtype(j) == 6 
            X(i,j) = Xmin(i,j); % An utility does not want to buy in the market
        elseif xtype(j) == 4
            X(i,j) = Xmin(i,j); % An utility does not want load curtailment
        elseif xtype(j) == 5
            X(i,j) = Xmin(i,j); % The utility wants to have ESS coordinated periods of charge/uncharge (here charge, below uncharge)
        elseif xtype(j) == 3
            X(i,j) = Xmin(i,j) + (Xmax(i,j) - Xmin(i,j))/kk; % An utility wants to operate without complexities (if possible only the load), 
        end                                                  % but utility can use the V2G option in the peak load periods
    end
end

        k = 1;
        for i = 1:nper
            for j = 1:nctrl
                x(k) = X(i,j);
                k = k + 1;
            end
        end

display('search for best periods of V2G and ESS charge/discharge ')
display('V2G')        
V2Gperiod=2; %tuned parameter        
ESSperiod=5; %tuned parameter for the study case, if different case consider to tune again
for V2Ginitialhour=12:12 % bigger probability in these hours of have the peak load
            
           % in peak loads hours, the utility can use the V2G capacity from EV (search for the best periods) 
           for i=15:48
                for j=V2Ginitialhour:V2Ginitialhour+V2Gperiod
                        x(i+((j-1)*142))=xmax(i+((j-1)*142));
                end
           end
           
        for i=139:140
            for j=ESSdischargehour:ESSdischargehour+ESSperiod
                    x(i+((j-1)*142))=(xmax(i+((j-1)*142)));
            end
        end

       for i = 1:D
            if x(i) < xmin(i)
                x(i) = xmin(i);
            elseif x(i) > xmax(i)
                x(i) = xmax(i);  
            end
        end    

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        if iter < Niter
            [solFitness_M, solPenalties_M,Struct_Eval]=feval(fnc,x,caseStudyData, otherParameters,deParameters.Scenarios);
        
            nEvals  = nEvals+(deParameters.I_NP*deParameters.Scenarios);

            for i=1:deParameters.I_NP   % Eval Initial population
                    FIT(i)  = mean(solFitness_M(i,:))+mean(solPenalties_M(i,:));  
                    obj(i)  = FIT(i); 
                    fit(i)  = mean(solFitness_M(i,:))+std(solFitness_M(i,:));
                    pit(i)  = mean(solPenalties_M(i,:));
                    stdr(i)  = std(solFitness_M(i,:));
                    
            end
       
            xrep=x;
            
            %[FIT,obj,xrep,otherParameters] = fitnessFun_DER(x,caseStudyData,otherParameters);
            %[fit,~,penSlack,penSlines,penVmin,penVmax] = constraint_handling(obj,xrep,Xmax,Xmin,penalty,caseStudyData,otherParameters);
            iter = iter + 1;
            fitMaxVector(:,iter)=[mean(solFitness_M(1,:));mean(solPenalties_M(1,:))];

            if FIT < FITBEST
                FITBEST = FIT;
                OBJBEST = obj;
%                 fitMaxVector(iter) = FITBEST;
                objMaxVector(:,iter)= OBJBEST(1,:);
            else
%                 fitMaxVector(iter) = FITBEST;
                objMaxVector(:,iter)= OBJBEST(1,:);
            end
        else
            1001
        end
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        if fit < fbest
            %fprintf('%2d, %2d, ITER: %5d, FITNESS: %10.4f, OBJECTIVE: %10.4f, INF: %10.4f, OC: %10.4f, IN: %10.4f; \n',0,kn,iter,fit,obj(2)-obj(1),fit+obj(1)-obj(2),obj(2),obj(1));

            fbest = fit
            V2Ginitialhour
            pit;
            stdr;
            nEvals;
            objbest = obj;
            xbest = xrep;

        end

    X = vec2mat(xbest,nctrl);
    
    x=xbest;

end

%   display('search for best periods of ESS discharge to help utility ')
%   display('ESS')
%   ESSperiod=5;%tuned parameter
%    for ESSdischargehour=12:12 % bigger probability in these hours of have the peak load
%             
%         % the utility wants to have coordinated periods of charge/uncharge
%         % the ESS (uncharge during the peak load periods, charge in the low
%         % demands), (search for the best periods)
%         for i=139:140
%             for j=ESSdischargehour:ESSdischargehour+ESSperiod
%                     x(i+((j-1)*142))=(xmax(i+((j-1)*142)));
%             end
%         end
% 
%        for i = 1:D
%             if x(i) < xmin(i)
%                 x(i) = xmin(i);
%             elseif x(i) > xmax(i)
%                 x(i) = xmax(i);  
%             end
%         end    
% 
%         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%         if iter < Niter
%             [solFitness_M, solPenalties_M,Struct_Eval]=feval(fnc,x,caseStudyData, otherParameters,deParameters.Scenarios);
%         
%             nEvals  = nEvals+(deParameters.I_NP*deParameters.Scenarios);
% 
%             for i=1:deParameters.I_NP   % Eval Initial population
%                     FIT(i)  = mean(solFitness_M(i,:))+mean(solPenalties_M(i,:));  
%                     obj(i)  = FIT(i); 
%                     fit(i)  = mean(solFitness_M(i,:))+std(solFitness_M(i,:));
%                     pit(i)  = mean(solPenalties_M(i,:));
%                     stdr(i)  = std(solFitness_M(i,:));
%                     
%             end
%        
%             xrep=x;
%             
%             %[FIT,obj,xrep,otherParameters] = fitnessFun_DER(x,caseStudyData,otherParameters);
%             %[fit,~,penSlack,penSlines,penVmin,penVmax] = constraint_handling(obj,xrep,Xmax,Xmin,penalty,caseStudyData,otherParameters);
%             iter = iter + 1;
%             fitMaxVector(:,iter)=[mean(solFitness_M(1,:));mean(solPenalties_M(1,:))];
% 
%             if FIT < FITBEST
%                 FITBEST = FIT;
%                 OBJBEST = obj;
% %                 fitMaxVector(iter) = FITBEST;
%                 objMaxVector(:,iter)= OBJBEST(1,:);
%             else
% %                 fitMaxVector(iter) = FITBEST;
%                 objMaxVector(:,iter)= OBJBEST(1,:);
%             end
%         else
%             1001
%         end
%         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%         if fit < fbest
%             %fprintf('%2d, %2d, ITER: %5d, FITNESS: %10.4f, OBJECTIVE: %10.4f, INF: %10.4f, OC: %10.4f, IN: %10.4f; \n',0,kn,iter,fit,obj(2)-obj(1),fit+obj(1)-obj(2),obj(2),obj(1));
% 
%             fbest = fit
%             ESSdischargehour
%             pit;
%             stdr;
%             nEvals;
%             objbest = obj;
%             xbest = xrep;
% 
%         end
% 
%     X = vec2mat(xbest,nctrl);
%     
%     x=xbest;
% 
%    end
        
    nEvals=iter*deParameters.Scenarios
    fbest
   
    x=xbest; 

        %% Worse performance criterion
[S_val, worstS]=max(solFitness_M,[],2); %Choose the solution with worse performance

% [~,I_best_index] = min(S_val); % This mean that the best individual correspond to the best worst performance
[ tmpgbestval, gbestid ] = min( fbest );
I_best_index=gbestid;
FVr_bestmemit = x(I_best_index,:); % best member of current iteration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% store other information
Best_otherInfo.idBestParticle = I_best_index;
Best_otherInfo.genCostsFinal = Struct_Eval(worstS(I_best_index)).otherParameters.genCosts(I_best_index,:);
Best_otherInfo.loadDRcostsFinal = Struct_Eval(worstS(I_best_index)).otherParameters.loadDRcosts(I_best_index,:);
Best_otherInfo.v2gChargeCostsFinal = Struct_Eval(worstS(I_best_index)).otherParameters.v2gChargeCosts(I_best_index,:);
Best_otherInfo.v2gDischargeCostsFinal =Struct_Eval(worstS(I_best_index)).otherParameters.v2gDischargeCosts(I_best_index,:);
Best_otherInfo.storageChargeCostsFinal = Struct_Eval(worstS(I_best_index)).otherParameters.storageChargeCosts(I_best_index,:);
Best_otherInfo.storageDischargeCostsFinal = Struct_Eval(worstS(I_best_index)).otherParameters.storageDischargeCosts(I_best_index,:);
Best_otherInfo.stBalanceFinal = Struct_Eval(worstS(I_best_index)).otherParameters.stBalance(I_best_index,:,:);
Best_otherInfo.v2gBalanceFinal = Struct_Eval(worstS(I_best_index)).otherParameters.v2gBalance(I_best_index,:,:);
Best_otherInfo.penSlackBusFinal = Struct_Eval(worstS(I_best_index)).otherParameters.penSlackBus(I_best_index,:);
fitMaxVector(:,iter)=[mean(solFitness_M(I_best_index,:));mean(solPenalties_M(I_best_index,:))]; %We save the mean value and mean penalty value

p1=sum(Best_otherInfo.penSlackBusFinal);
Fit_and_p=[fitMaxVector(1,iter-1) p1]; %;p2;p3;p4]
    
    display('META-HEURISTIC RULES')
    display('DEEPSO')
    DEparametersDEEPSO; %Function defined by the participant
    No_solutions=deParameters.I_NP;
        
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Set other parameters
     otherParameters =setOtherParameters(caseStudyData,No_solutions);
     otherParameters.otherParametersone =setOtherParameters(caseStudyData,1); %This is needed to evaluate one solution
     otherParameters.No_eval_Scenarios=500;

    [Fit_and_p,FVr_bestmemit, fitMaxVector, Best_otherInfo] = ...
    DEEPSO_RE(deParameters,caseStudyData,otherParameters,xmin,xmax,nEvals,xbest);

end