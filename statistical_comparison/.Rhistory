#CUMDANCauchy vs GMVNPSO
Wilcoxontest( archive$CUMDANCauchy, archive$CUMDANCauchy)
#CUMDANCauchy vs VNSDEEPSO
Wilcoxontest( archive$CUMDANCauchy, archive$EHL_PS_VNSO)
#CUMDANCauchy vs PSO_GBP
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
#CUMDANCauchy vs HL_PS_VNSO
Wilcoxontest( archive$CUMDANCauchy, archive$DEEDA)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
FriendmanTest <-function(dataFile, sep =","){
x<-read.table(dataFile, header = TRUE, sep = sep)
#
x <- abs(x) #if negative value
x <- x*(-1)  #Minimize
print(friedmanTest(x))
print(imanDavenportTest(x))
#calculate Mean of rank
mean.rank<-colMeans(rankMatrix(x))
#Sorted Vector
pos<-order(mean.rank)[1]
mean.rank = mean.rank[order(mean.rank)]
FriendRank<-data.frame(Ranking=mean.rank)
print(FriendRank)
postHoc<-friedmanPost(x, control = NULL)
hoc_vector<-postHoc[pos,]
bad<-is.na(hoc_vector)
hoc_v<-hoc_vector[!bad]
Data <- data.frame(P_value=hoc_v)
### Check if data is ordered the way we intended
headtail(Data)
### Perform p-value adjustments and add to data frame
##Controlling the familywise error rate: Bonferroni correction
####The methods Holm, Hochberg, Hommel, and Bonferroni control the family-wise error rate.  These methods attempt to limit the probability of even one false discovery (a type I error, incorrectly rejecting the null hypothesis when there is no real effect), and so are all relatively strong (conservative).
Data$Bonferroni =
p.adjust(Data$P_value,
method = "bonferroni")
Data$BH =
p.adjust(Data$P_value,
method = "BH")
Data$Holm =
p.adjust(Data$P_value,
method = "holm")
Data$Hochberg =
p.adjust(Data$P_value,
method = "hochberg")
Data$Hommel =
p.adjust(Data$P_value,
method = "hommel")
Data$BY =
p.adjust(Data$P_value,
method = "BY")
print(Data)
X = Data$P_value
Y = cbind(Data$Bonferroni,
Data$BH,
Data$Holm,
Data$Hochberg,
Data$Hommel,
Data$BY)
matplot(X, Y,
xlab="p-value",
ylab="Adjusted p-value",
type="l",
asp=1,
col=1:6,
lty=1,
lwd=2)
legend('bottomright',
legend = c("Bonferroni", "BH", "Holm", "Hochberg", "Hommel", "BY"),
col = 1:6,
cex = 1,
pch = 16)
abline(0, 1,
col=1,
lty=2,
lwd=1)
}
FriendmanTest(file.choose()) #Load to file .csv
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
#install.packages(readr)
# Cargar el paquete
library(readr)
#archive = read_csv(file.choose(),header=T)
archive = read_csv(file.choose())
#archive=read_tsv("https://github.com/cybervalient/GECCO_CEC_smartgrid_experiments/tree/master/statistical_comparison/avg_conv_rate.csv")
str(archive)
shapiro.test(archive$RDG3_DEEPSO)
shapiro.test(archive$CE_CMAES)
shapiro.test(archive$HFEABC)
shapiro.test(archive$DE_TLBO)
shapiro.test(archive$PSO_GBP)
shapiro.test(archive$GASAPSO)
shapiro.test(archive$AJSO)
shapiro.test(archive$CUMDANCauchy)
shapiro.test(archive$EHL_PS_VNSO)
shapiro.test(archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
shapiro.test(archive$`Ensembled_method_of_CBBO_Cauchy and DEEPSO`)
shapiro.test(archive$DEEDA)
shapiro.test(archive$VNS_DEEPSO)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
Wilcoxontest <-function(x,y){
wilcoxonSignedTest(x,y)
}
archive<-read.table(file.choose(), header = TRUE, sep =",")
#CUMDANCauchy vs chaotic_deepso
Wilcoxontest(archive$CUMDANCauchy,archive$RDG3_DEEPSO)
#CUMDANCauchy vs DESS
Wilcoxontest(archive$CUMDANCauchy, archive$CE_CMAES)
#CUMDANCauchy vs EPSO
Wilcoxontest( archive$CUMDANCauchy, archive$HFEABC)
#CUMDANCauchy vs evdeepso
Wilcoxontest( archive$CUMDANCauchy, archive$DE_TLBO)
#CUMDANCauchy vs Firefly
Wilcoxontest( archive$CUMDANCauchy, archive$PSO_GBP)
#CUMDANCauchy vs Guide_DE
Wilcoxontest( archive$CUMDANCauchy, archive$GASAPSO)
#CUMDANCauchy vs UPSO
Wilcoxontest( archive$CUMDANCauchy, archive$AJSO)
#CUMDANCauchy vs GMVNPSO
Wilcoxontest( archive$CUMDANCauchy, archive$CUMDANCauchy)
#CUMDANCauchy vs VNSDEEPSO
Wilcoxontest( archive$CUMDANCauchy, archive$EHL_PS_VNSO)
#CUMDANCauchy vs PSO_GBP
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy.and.DEEPSO)
#CUMDANCauchy vs HL_PS_VNSO
Wilcoxontest( archive$CUMDANCauchy, archive$DEEDA)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
FriendmanTest <-function(dataFile, sep =","){
x<-read.table(dataFile, header = TRUE, sep = sep)
#
x <- abs(x) #if negative value
x <- x*(-1)  #Minimize
print(friedmanTest(x))
print(imanDavenportTest(x))
#calculate Mean of rank
mean.rank<-colMeans(rankMatrix(x))
#Sorted Vector
pos<-order(mean.rank)[1]
mean.rank = mean.rank[order(mean.rank)]
FriendRank<-data.frame(Ranking=mean.rank)
print(FriendRank)
postHoc<-friedmanPost(x, control = NULL)
hoc_vector<-postHoc[pos,]
bad<-is.na(hoc_vector)
hoc_v<-hoc_vector[!bad]
Data <- data.frame(P_value=hoc_v)
### Check if data is ordered the way we intended
headtail(Data)
### Perform p-value adjustments and add to data frame
##Controlling the familywise error rate: Bonferroni correction
####The methods Holm, Hochberg, Hommel, and Bonferroni control the family-wise error rate.  These methods attempt to limit the probability of even one false discovery (a type I error, incorrectly rejecting the null hypothesis when there is no real effect), and so are all relatively strong (conservative).
Data$Bonferroni =
p.adjust(Data$P_value,
method = "bonferroni")
Data$BH =
p.adjust(Data$P_value,
method = "BH")
Data$Holm =
p.adjust(Data$P_value,
method = "holm")
Data$Hochberg =
p.adjust(Data$P_value,
method = "hochberg")
Data$Hommel =
p.adjust(Data$P_value,
method = "hommel")
Data$BY =
p.adjust(Data$P_value,
method = "BY")
print(Data)
X = Data$P_value
Y = cbind(Data$Bonferroni,
Data$BH,
Data$Holm,
Data$Hochberg,
Data$Hommel,
Data$BY)
matplot(X, Y,
xlab="p-value",
ylab="Adjusted p-value",
type="l",
asp=1,
col=1:6,
lty=1,
lwd=2)
legend('bottomright',
legend = c("Bonferroni", "BH", "Holm", "Hochberg", "Hommel", "BY"),
col = 1:6,
cex = 1,
pch = 16)
abline(0, 1,
col=1,
lty=2,
lwd=1)
}
FriendmanTest(file.choose()) #Load to file .csv
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
#install.packages(readr)
# Cargar el paquete
library(readr)
#archive = read_csv(file.choose(),header=T)
archive = read_csv(file.choose())
#archive=read_tsv("https://github.com/cybervalient/GECCO_CEC_smartgrid_experiments/tree/master/statistical_comparison/avg_conv_rate.csv")
str(archive)
shapiro.test(archive$RDG3_DEEPSO)
shapiro.test(archive$CE_CMAES)
shapiro.test(archive$HFEABC)
shapiro.test(archive$DE_TLBO)
shapiro.test(archive$PSO_GBP)
shapiro.test(archive$GASAPSO)
shapiro.test(archive$AJSO)
shapiro.test(archive$CUMDANCauchy)
shapiro.test(archive$EHL_PS_VNSO)
shapiro.test(archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
shapiro.test(archive$`Ensembled_method_of_CBBO_Cauchy and DEEPSO`)
shapiro.test(archive$DEEDA)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
Wilcoxontest <-function(x,y){
wilcoxonSignedTest(x,y)
}
archive<-read.table(file.choose(), header = TRUE, sep =",")
#CUMDANCauchy vs chaotic_deepso
Wilcoxontest(archive$CUMDANCauchy,archive$RDG3_DEEPSO)
#CUMDANCauchy vs DESS
Wilcoxontest(archive$CUMDANCauchy, archive$CE_CMAES)
#CUMDANCauchy vs EPSO
Wilcoxontest( archive$CUMDANCauchy, archive$HFEABC)
#CUMDANCauchy vs evdeepso
Wilcoxontest( archive$CUMDANCauchy, archive$DE_TLBO)
#CUMDANCauchy vs Firefly
Wilcoxontest( archive$CUMDANCauchy, archive$PSO_GBP)
#CUMDANCauchy vs Guide_DE
Wilcoxontest( archive$CUMDANCauchy, archive$GASAPSO)
#CUMDANCauchy vs UPSO
Wilcoxontest( archive$CUMDANCauchy, archive$AJSO)
#CUMDANCauchy vs GMVNPSO
Wilcoxontest( archive$CUMDANCauchy, archive$CUMDANCauchy)
#CUMDANCauchy vs VNSDEEPSO
Wilcoxontest( archive$CUMDANCauchy, archive$EHL_PS_VNSO)
#CUMDANCauchy vs PSO_GBP
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy.and.DEEPSO)
#CUMDANCauchy vs HL_PS_VNSO
Wilcoxontest( archive$CUMDANCauchy, archive$DEEDA)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
FriendmanTest <-function(dataFile, sep =","){
x<-read.table(dataFile, header = TRUE, sep = sep)
#
x <- abs(x) #if negative value
x <- x*(-1)  #Minimize
print(friedmanTest(x))
print(imanDavenportTest(x))
#calculate Mean of rank
mean.rank<-colMeans(rankMatrix(x))
#Sorted Vector
pos<-order(mean.rank)[1]
mean.rank = mean.rank[order(mean.rank)]
FriendRank<-data.frame(Ranking=mean.rank)
print(FriendRank)
postHoc<-friedmanPost(x, control = NULL)
hoc_vector<-postHoc[pos,]
bad<-is.na(hoc_vector)
hoc_v<-hoc_vector[!bad]
Data <- data.frame(P_value=hoc_v)
### Check if data is ordered the way we intended
headtail(Data)
### Perform p-value adjustments and add to data frame
##Controlling the familywise error rate: Bonferroni correction
####The methods Holm, Hochberg, Hommel, and Bonferroni control the family-wise error rate.  These methods attempt to limit the probability of even one false discovery (a type I error, incorrectly rejecting the null hypothesis when there is no real effect), and so are all relatively strong (conservative).
Data$Bonferroni =
p.adjust(Data$P_value,
method = "bonferroni")
Data$BH =
p.adjust(Data$P_value,
method = "BH")
Data$Holm =
p.adjust(Data$P_value,
method = "holm")
Data$Hochberg =
p.adjust(Data$P_value,
method = "hochberg")
Data$Hommel =
p.adjust(Data$P_value,
method = "hommel")
Data$BY =
p.adjust(Data$P_value,
method = "BY")
print(Data)
X = Data$P_value
Y = cbind(Data$Bonferroni,
Data$BH,
Data$Holm,
Data$Hochberg,
Data$Hommel,
Data$BY)
matplot(X, Y,
xlab="p-value",
ylab="Adjusted p-value",
type="l",
asp=1,
col=1:6,
lty=1,
lwd=2)
legend('bottomright',
legend = c("Bonferroni", "BH", "Holm", "Hochberg", "Hommel", "BY"),
col = 1:6,
cex = 1,
pch = 16)
abline(0, 1,
col=1,
lty=2,
lwd=1)
}
FriendmanTest(file.choose()) #Load to file .csv
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
#install.packages(readr)
# Cargar el paquete
library(readr)
#archive = read_csv(file.choose(),header=T)
archive = read_csv(file.choose())
#archive=read_tsv("https://github.com/cybervalient/GECCO_CEC_smartgrid_experiments/tree/master/statistical_comparison/avg_conv_rate.csv")
str(archive)
shapiro.test(archive$RDG3_DEEPSO)
shapiro.test(archive$CE_CMAES)
shapiro.test(archive$HFEABC)
shapiro.test(archive$DE_TLBO)
shapiro.test(archive$PSO_GBP)
shapiro.test(archive$GASAPSO)
shapiro.test(archive$AJSO)
shapiro.test(archive$CUMDANCauchy)
shapiro.test(archive$EHL_PS_VNSO)
shapiro.test(archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
shapiro.test(archive$`Ensembled_method_of_CBBO_Cauchy and DEEPSO`)
shapiro.test(archive$DEEDA)
shapiro.test(archive$VNS_DEEPSO)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
Wilcoxontest <-function(x,y){
wilcoxonSignedTest(x,y)
}
archive<-read.table(file.choose(), header = TRUE, sep =",")
#CUMDANCauchy vs chaotic_deepso
Wilcoxontest(archive$CUMDANCauchy,archive$RDG3_DEEPSO)
#CUMDANCauchy vs DESS
Wilcoxontest(archive$CUMDANCauchy, archive$CE_CMAES)
#CUMDANCauchy vs EPSO
Wilcoxontest( archive$CUMDANCauchy, archive$HFEABC)
#CUMDANCauchy vs evdeepso
Wilcoxontest( archive$CUMDANCauchy, archive$DE_TLBO)
#CUMDANCauchy vs Firefly
Wilcoxontest( archive$CUMDANCauchy, archive$PSO_GBP)
#CUMDANCauchy vs Guide_DE
Wilcoxontest( archive$CUMDANCauchy, archive$GASAPSO)
#CUMDANCauchy vs UPSO
Wilcoxontest( archive$CUMDANCauchy, archive$AJSO)
#CUMDANCauchy vs GMVNPSO
Wilcoxontest( archive$CUMDANCauchy, archive$CUMDANCauchy)
#CUMDANCauchy vs VNSDEEPSO
Wilcoxontest( archive$CUMDANCauchy, archive$EHL_PS_VNSO)
#CUMDANCauchy vs PSO_GBP
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy_and_DEEPSO)
Wilcoxontest( archive$CUMDANCauchy, archive$Ensembled_method_of_CBBO_Cauchy.and.DEEPSO)
#CUMDANCauchy vs HL_PS_VNSO
Wilcoxontest( archive$CUMDANCauchy, archive$DEEDA)
#############################################################
#         This code was created by: Yoan Martínez López     #
#         email: yoan.martinez@reduc.edu.cu                 #
#                cybervalient@gmail.com                     #
#                         2021                              #
#############################################################
source(file.choose()) #Load to tests.R
source(file.choose()) #Load to post_hoc.R
library(FSA)
FriendmanTest <-function(dataFile, sep =","){
x<-read.table(dataFile, header = TRUE, sep = sep)
#
x <- abs(x) #if negative value
x <- x*(-1)  #Minimize
print(friedmanTest(x))
print(imanDavenportTest(x))
#calculate Mean of rank
mean.rank<-colMeans(rankMatrix(x))
#Sorted Vector
pos<-order(mean.rank)[1]
mean.rank = mean.rank[order(mean.rank)]
FriendRank<-data.frame(Ranking=mean.rank)
print(FriendRank)
postHoc<-friedmanPost(x, control = NULL)
hoc_vector<-postHoc[pos,]
bad<-is.na(hoc_vector)
hoc_v<-hoc_vector[!bad]
Data <- data.frame(P_value=hoc_v)
### Check if data is ordered the way we intended
headtail(Data)
### Perform p-value adjustments and add to data frame
##Controlling the familywise error rate: Bonferroni correction
####The methods Holm, Hochberg, Hommel, and Bonferroni control the family-wise error rate.  These methods attempt to limit the probability of even one false discovery (a type I error, incorrectly rejecting the null hypothesis when there is no real effect), and so are all relatively strong (conservative).
Data$Bonferroni =
p.adjust(Data$P_value,
method = "bonferroni")
Data$BH =
p.adjust(Data$P_value,
method = "BH")
Data$Holm =
p.adjust(Data$P_value,
method = "holm")
Data$Hochberg =
p.adjust(Data$P_value,
method = "hochberg")
Data$Hommel =
p.adjust(Data$P_value,
method = "hommel")
Data$BY =
p.adjust(Data$P_value,
method = "BY")
print(Data)
X = Data$P_value
Y = cbind(Data$Bonferroni,
Data$BH,
Data$Holm,
Data$Hochberg,
Data$Hommel,
Data$BY)
matplot(X, Y,
xlab="p-value",
ylab="Adjusted p-value",
type="l",
asp=1,
col=1:6,
lty=1,
lwd=2)
legend('bottomright',
legend = c("Bonferroni", "BH", "Holm", "Hochberg", "Hommel", "BY"),
col = 1:6,
cex = 1,
pch = 16)
abline(0, 1,
col=1,
lty=2,
lwd=1)
}
FriendmanTest(file.choose()) #Load to file .csv
